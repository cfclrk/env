#+TITLE: envars
#+OPTIONS: toc:nil

* envars                                 :readme:commentary:info:ignore:

  Set or unset environment variables from an "env" or dotenv file.

  This package provides two interactive functions:

  1. =envars=: Set all the environment variables defined in an env file.
  2. =envars-unset=: Unset all the environment variables defined in an env
     file.

  When used interactively, each function prompts for a file. By default, the
  prompt begins at =envars-dir=.

* Installation                                                       :readme:

  Copy =envars.el= to your machine, and load it:

  #+begin_src emacs-lisp
    (load "/path/to/envars.el")
  #+end_src

  Or, using straight:

  #+begin_src emacs-lisp
    (straight-use-package
     '(envars :type git
                   :host github
                   :repo "cfclrk/envars"))
  #+end_src

* Usage                                              :readme:commentary:info:

  Start by creating an env file in =envars-dir= (by default, =~/.env/=).
  For example, create this file in =~/.env/foo=:

  #+begin_src sh
    FOO=~/foo
    BAR=$FOO/bar
    ОФИС=ДОМ
    BAZ=nosubst:FOO$BAR
  #+end_src

  Now, you can run:

  - =M-x envars=, which will prompt you for a file. All the environment
    variables defined in the file will be *set*.
  - =M-x envars-unset=, which will prompt you for a file. All the
    environment variables defined in the file will be *unset*.

** Usage from Elisp

   To set env variables defined in =~/.env/foo=:

   #+begin_src emacs-lisp
     (envars (expand-file-name "~/.env/foo"))
   #+end_src

   Or, if you have a string instead of a file:

   #+begin_src emacs-lisp
     (envars-str "FOO=foo\nBAR=bar")
   #+end_src

** Usage from org-mode

   The example below shows a convenient way to declare and set environment
   variables in an =org= document:

   #+begin_example
   #+NAME: env
   | Var  | Value           |
   |------+-----------------|
   | FOO  | ~/foo           |
   | BAR  | $FOO/bar        |
   | ОФИС | ДОМ             |
   | BAZ  | nosubst:FOO$BAR |

   #+begin_src emacs-lisp :var env=env
     (envars-set-pairs env)
   #+end_src
   #+end_example

* File Format                                        :readme:commentary:info:

  Each line in the file should be in a =KEY=VALUE= format, with one entry per
  line. This package does not invoke a shell to interpret the file, so most
  shell-isms will not work. However, the env file may:

  - Use existing environment variables
  - Define an environment variable and use it in successive lines
  - A =~= is expanded if it is the first character in the value
  - If a value starts with =nosubst:=, no variable substitution will be
    performed. You need this if there is a literal =$= in the value.

* Development                                                        :readme:

  1. =make dep=: Install dependencies
  2. =make test=: Run unit tests (you must run =make dep= first!)
  3. =make doc=: Runs an org export on =doc/doc.org= which creates:

     * =README.md=
     * The =;;; Commentary= section in =envars.el=
     * Package texinfo (=.texi= and =.info=) in =doc/=

* See Also                                                           :readme:

  - [[https://github.com/wbolster/emacs-direnv][emacs-direnv]]
  - [[https://github.com/purcell/envrc][envrc]]
  - [[https://github.com/articuluxe/parsenv][parsenv]]

* Notes                                                            :noexport:

  TODO: Maybe this isn't the way to do it. Another possibility is to use the
  =sh= shell to evaluate the file, and then diff the result against the current
  environment. I /think/ that is what =direnv= does.

  TODO: Make envars-set and envars-unset functions. Can they just be
  aliases?

  - Test to ensure multibyte strings are normalized
  - Test value surrounded quotes
  - Test value with special chars like quotes and commas
  - Check with melpazoid (https://github.com/riscy/melpazoid)
  - Set up a [[https://github.com/marketplace/actions/emacs-lisp-check][GitHub Action]]
  - Add package-lint to tests
